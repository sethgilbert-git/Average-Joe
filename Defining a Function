# There are some key components we want to note here: The def keyword indicates the beginning of a function (also known as a function header). The function header is followed by a name in snake_case format that describes the task the function performs. It’s best practice to give your functions a descriptive yet concise name.
# Following the function name is a pair of parenthesis ( ) that can hold input values known as parameters (more on parameters later in the lesson!). In this example function, we have no parameters.
# A colon : to mark the end of the function header.
# Lastly, we have one or more valid python statements that make up the function body (where we have our python comment).
# Your code below: 
def trip_welcome():
  print("Welcome to Tripcademy!") 
  print("Let's get you to your destination.")


def directions_to_timesSq():
  print('Walk 4 mins to 34th St Herald Square train station')
  print('Take the Northbound N, Q, R, or W train 1 stop')
  print('Get off the Times Square 42nd Street stop')

# To call our function, we must type out the function’s name followed by a pair of parentheses and no indentation:
#_____________________________________________________________________________________________________________________________________________________________________________
#Function parameters allow our function to accept data as an input value. We list the parameters a function takes as input between the parentheses of a function ( ).

#Here is a function that defines a single parameter:
def my_function(single_parameter)
  # some code
#In the context of our trip_welcome() function, it would look like this:
def trip_welcome(destination):
  print("Welcome to Tripcademy!") 
  print("Looks like you're going to " + destination + " today.")
#In the above example, we define a single parameter called destination and apply it in our function body in the second print statement. We are telling our function it should expect some data passed in for destination that it can apply to any statements in the function body.

#But how do we actually use this parameter? Our parameter of destination is used by passing in an argument to the function when we call it.
trip_welcome("Times Square")
#This would output:
#Welcome to Tripcademy! Looks like you're going to Times Square today. 

#________________________________________________________________________________________________________________________________________________________________________
#We can write a function that takes in more than one parameter by using commas:
#def my_function(parameter1, parameter2, parameter3):
  # Some code
#When we call our function, we will need to provide arguments for each of the parameters we assigned in our function definition.
# Calling my_function
#my_function(argument1, argument2)
#For example take our trip application’s trip_welcome() function that has two parameters:
def trip_welcome(origin, destination):
  print("Welcome to Tripcademy")
  print("Looks like you are traveling from " + origin)
  print("And you are heading to " + destination)
# Our two parameters in this function are origin and destination. In order to properly call our function, we need to pass argument values for both of them.

# The ordering of your parameters is important as their position will map to the position of the arguments and will determine their assigned value in the function body (more on this in the next exercise!).

# Our function call could look like:
trip_welcome("Prospect Park", "Atlantic Terminal")
# Output would be: Welcome to Tripcademy Looks like you are traveling from Prospect Park And you are heading to Atlantic Terminal



# EXAMPLE'
# Write your code below: 

def calculate_expenses(plane_ticket_price, car_rental_rate, hotel_rate, trip_time):
  car_rental_total = car_rental_rate * trip_time
  hotel_total = hotel_rate * trip_time - 10
  trip_total = car_rental_total + hotel_total + plane_ticket_price
  

  return trip_total
#The line return trip_total sends the final calculated value from your function back to where it was called, so you can use or print the result outside the function. This is how your function gives you an answer!

# Step 5: call your function
print(calculate_expenses(200, 100, 100, 5))


#____________________________________________________________________________________________________________________________________________________________________________

# In Python, there are 3 different types of arguments we can give a function.

# Positional arguments: arguments that can be called by their position in the function definition.

# Keyword arguments: arguments that can be called by their name.

# Default arguments: arguments that are given default values.

# Positional Arguments are arguments we have already been using! Their assignments depend on their positions in the function call. Let’s look at a function called calculate_taxi_price() that allows our users to see how much a taxi would cost to their destination
def calculate_taxi_price(miles_to_travel, rate, discount):
  print(miles_to_travel * rate - discount )
# In this function, miles_to_travel is positioned as the first parameter, rate is positioned as the second parameter, and discount is the third. When we call our function, the position of the arguments will be mapped to the positions defined in the function declaration.
# 100 is miles_to_travel
# 10 is rate
# 5 is discount
calculate_taxi_price(100, 10, 5)
# Alternatively, we can use Keyword Arguments where we explicitly refer to what each argument is assigned to in the function call. Notice in the code example below that the arguments do not follow the same order as defined in the function declaration.

calculate_taxi_price(rate=0.5, discount=10, miles_to_travel=100)

# Lastly, sometimes we want to give our function parameters default values. We can provide a default value to a parameter by using the assignment operator (=). This will happen in the function declaration rather than the function call.

# Here is an example where the discount argument in our calculate_taxi_price function will always have a default value of 10:

def calculate_taxi_price(miles_to_travel, rate, discount = 10):
  print(miles_to_travel * rate - discount )

# When using a default argument, we can either choose to call the function without providing a value for a discount (and thus our function will use the default value assigned) or overwrite the default argument by providing our own:

# Using the default value of 10 for discount.
calculate_taxi_price(10, 0.5)

# Overwriting the default value of 10 with 20
calculate_taxi_price(10, 0.5, 20)





# Write your code below:


