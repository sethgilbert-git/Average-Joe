# The structure follows this pattern:
# while <conditional statement>:
  # <action>
# Let’s examine this example, where we print the integers 0 through 3:
count = 0
while count <= 3:
  # Loop Body
  print(count)
  count += 1
# Let’s break the loop down:

# count is initially defined with the value of 0. The conditional statement in the while loop is count <= 3, which is true at the initial iteration of the loop, so the loop body executes.
# Inside the loop body, count is printed and then incremented by 1.

# When the first iteration of the loop has finished, Python returns to the top of the loop and checks the conditional again. After the first iteration, count would be equal to 1 so the conditional still evaluates to True and so the loop continues.

# This continues until the count variable becomes 4. At that point, when the conditional is tested it will no longer be True and the loop will stop.

# The output would be: 0, 1, 2, 3

# Elegant loops:
# Similar to for loops, Python allows us to write elegant one-line while loops. Here is our previous example in a single line:
count = 0
while count <= 3: print(count); count += 1
# Note: Here we separate each statement with a ; to denote a separate line of code.

# Let’s write a while loop that counts down from 10 to 0(inclusive). Once our loop is finished we will commemorate our accomplishment by printing "We have liftoff!".
countdown = 10
while countdown >= 0:
  print(str(countdown - 1))
print("We have liftoff!")


